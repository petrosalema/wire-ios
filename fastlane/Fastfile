opt_out_usage
default_platform(:ios)

platform :ios do

    desc "Fetch dependencies"
    lane :prepare do |options|
        build_type = options[:build_type]
        if build_type.nil? 
            sh "cd .. && ./setup.sh"
        else
            sh "cd .. && ./setup.sh --override_with wire-ios-build-assets/CI\ configuration/#{build_type}"
        end
    end


    desc "Build for testing"
    lane :build do
        build_app(
            scheme: "Wire-iOS",
            configuration: "Debug",
            build_for_testing: true,
            devices: ["iPhone 7"],
            code_coverage: true,
            derived_data_path: "DerivedData",
            buildlog_path: "build",
            output_directory: "build",
            output_types: "junit"
        )
    end

    desc "Test without building"
    lane :test do
        scan(
            scheme: "Wire-iOS",
            configuration: "Debug",
            test_without_building: true,
            devices: ["iPhone 7"],
            code_coverage: true,
            derived_data_path: "DerivedData",
            buildlog_path: "test",
            output_directory: "test",
            output_types: "junit"
        )
    end

    desc "Build for AppStore"
    lane :build_for_release do |options|
        build_type = options[:build_type]
        if build_type.nil? 
            UI.user_error! "Pass buid_type parameter, e.g. fastlane build_for_release build_type:Development"
        end
        build_number = ENV["BUILD_NUMBER"]
        if build_number.nil?
            UI.user_error! "Pass build number in environment variable BUILD_NUMBER"
        end

        build = Build.new(build_type: build_type, branch: git_branch, build_number: build_number)

        build_app(
            scheme: "Wire-iOS",
            export_method: build.export_method,
            export_options: {"iCloudContainerEnvironment": "Production"},
            derived_data_path: "DerivedData",
            archive_path: "release/#{build.filename}",
            buildlog_path: "release",
            output_directory: "release",
            output_name: build.filename,
            include_bitcode: false,
            include_symbols: true,
            xcargs: "BUILD_NUMBER=#{build_number}"
        )
    end

    desc "Upload to AppStore"
    lane :release_app_store do
        sh "cp ../Configuration/Appfile ."
        deliver(
            ipa: "appstore/Wire.ipa",
            submit_for_review: false,
            automatic_release: false,
            force: true, # Skip HTML report verification
            skip_binary_upload: false,
            run_precheck_before_submit: false,
            precheck_include_in_app_purchases: false,
            skip_app_version_update: true,
            skip_metadata: true,
            skip_screenshots: true,
        )
    end

    desc "Run post-test tasks"
    lane :post_test do
        sh "curl -s https://codecov.io/bash > codecov"
        sh "chmod +x codecov"
        codecov = "./codecov -J '^Wire$' -D ../DerivedData"

        if ENV["BUILD_REASON"] == "PullRequest"
            if ENV["CODECOV_TOKEN"].nil?
                UI.user_error! "codecov.io token missing for current repository. Set it in CODECOV_TOKEN environment variable"
            end

            if ENV["BUILD_SOURCEBRANCH"].nil?
                UI.user_error! "Source branch env variable missing. Set BUILD_SOURCEBRANCH to fix it"
            end

            pull_request_number = ENV["BUILD_SOURCEBRANCH"].split("/")[2] # For PRs the branch is in format "refs/pull/1/merge"

            codecov << " -t #{ENV["CODECOV_TOKEN"]} -P #{pull_request_number}"
        end

        sh codecov

    end
end

class Build
    attr_reader :build_type
    attr_reader :git_branch
    attr_reader :build_number

    def initialize(build_type:, branch:, build_number:)
        if build_type.nil? 
            return nil
        end
        @build_type = build_type
        @git_branch = branch
        @build_number = build_number
    end

    def export_method
        if @build_type == "AppStore"
            return "app-store"
        else 
            return "enterprise"
        end
    end

    def filename
        normalized_branch_name = @git_branch.gsub("/", "_")
        return "Wire-#{@build_type.downcase}-#{normalized_branch_name}-#{@build_number}"
    end

end
